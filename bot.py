import telebot
import json
import random
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8464828448:AAHGVxbd9EA7h4wqbTdZncWrnLmSPQmaNKI'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = '8218378618'    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DB_FILE = 'users.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    try:
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_balance(user_id):
    users = load_users()
    return users.get(str(user_id), {}).get('balance', 100)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_balance(user_id, new_balance, username="", first_name=""):
    users = load_users()
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        users[user_id_str] = {
            'balance': new_balance,
            'username': username,
            'first_name': first_name,
            'joined_date': datetime.now().isoformat()
        }
    else:
        users[user_id_str]['balance'] = new_balance
        if username:
            users[user_id_str]['username'] = username
        if first_name:
            users[user_id_str]['first_name'] = first_name
    
    save_users(users)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info(user_id):
    users = load_users()
    return users.get(str(user_id), {})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    chat_type = message.chat.type
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    update_user_balance(user_id, get_user_balance(user_id), username, first_name)
    
    if chat_type == 'private':
        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç, —Ç—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞!</b>\n\n"
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —á–∞—Ç–∞—Ö.\n"
            "üì≤ –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ–π —á–∞—Ç, —á—Ç–æ–±—ã —è –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å!\n\n"
            "‚öôÔ∏è –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "üé≤ /kasik - –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ\n"
            "üíº /work - –†–∞–±–æ—Ç–∞—Ç—å\n"
            "üí∞ /pay - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏\n"
            "üìä /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"
        )
        bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')
    else:
        welcome_text = (
            "üé∞ <b>Casino Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> üé∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üé≤ /kasik - –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ\n"
            "üíº /work - –†–∞–±–æ—Ç–∞—Ç—å (—Ç–∞–∫—Å–∏—Å—Ç, —é—Ä–∏—Å—Ç, –∑–∞–≤–æ–¥)\n"
            "üí∞ /pay @username —Å—É–º–º–∞ - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏\n"
            "üìä /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n\n"
            "üí∏ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>100$</b>"
        )
        bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kasik
@bot.message_handler(commands=['kasik'])
def kasino_game(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç.")
        return
    
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    balance = get_user_balance(user_id)
    
    # –°—É–º–º—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    bet_amounts = [25, 100, 1000]
    lost_amount = random.choice(bet_amounts)
    
    if balance >= lost_amount:
        new_balance = balance - lost_amount
        update_user_balance(user_id, new_balance, username, first_name)
        
        message_text = (
            f"üî¥ <b>–í–´ –ü–†–û–ï–ë–ê–õ–ò {lost_amount}$ –í –ö–ê–ó–ò–ù–û</b> üî¥\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_balance}$</b>"
        )
    else:
        message_text = (
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ!</b>\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}$</b>"
        )
    
    bot.send_message(message.chat.id, message_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /work
@bot.message_handler(commands=['work'])
def work_command(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç.")
        return
    
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    balance = get_user_balance(user_id)
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã
    jobs = ['—Ç–∞–∫—Å–∏—Å—Ç–æ–º', '—é—Ä–∏—Å—Ç–æ–º', '–Ω–∞ –∑–∞–≤–æ–¥–µ']
    job = random.choice(jobs)
    salary = random.randint(10, 250)
    new_balance = balance + salary
    
    update_user_balance(user_id, new_balance, username, first_name)
    
    message_text = (
        f"üíº <b>–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ {job}</b>\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: <b>{salary}$</b>\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_balance}$</b>"
    )
    
    bot.send_message(message.chat.id, message_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
@bot.message_handler(commands=['balance'])
def balance_command(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç.")
        return
    
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    
    message_text = f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$</b>"
    bot.send_message(message.chat.id, message_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay
@bot.message_handler(commands=['pay'])
def pay_command(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùå –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç.")
        return
    
    try:
        user_id = message.from_user.id
        sender_username = message.from_user.username or ""
        sender_first_name = message.from_user.first_name or ""
        balance = get_user_balance(user_id)
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) < 3:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay @username —Å—É–º–º–∞\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /pay @username 100",
                parse_mode='HTML'
            )
            return
        
        target_username = parts[1].replace('@', '')
        amount = int(parts[2])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã
        if amount < 10:
            bot.send_message(message.chat.id, "‚ùå <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 10$</b>", parse_mode='HTML')
            return
        
        if amount > 1200:
            bot.send_message(message.chat.id, "‚ùå <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: 1200$</b>", parse_mode='HTML')
            return
        
        if balance < amount:
            bot.send_message(message.chat.id, "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!</b>", parse_mode='HTML')
            return
        
        # –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        users = load_users()
        target_user_id = None
        
        for uid, user_data in users.items():
            if user_data.get('username') == target_username:
                target_user_id = int(uid)
                break
        
        if not target_user_id:
            bot.send_message(
                message.chat.id, 
                f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", 
                parse_mode='HTML'
            )
            return
        
        if target_user_id == user_id:
            bot.send_message(message.chat.id, "‚ùå <b>–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>", parse_mode='HTML')
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        target_balance = get_user_balance(target_user_id)
        new_target_balance = target_balance + amount
        new_sender_balance = balance - amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        update_user_balance(target_user_id, new_target_balance)
        update_user_balance(user_id, new_sender_balance, sender_username, sender_first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
        target_info = get_user_info(target_user_id)
        target_name = target_info.get('first_name', target_username)
        sender_name = sender_first_name or sender_username
        
        message_text = (
            f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n"
            f"üë§ –û—Ç: <b>{sender_name}</b>\n"
            f"üë• –ö–æ–º—É: <b>{target_name}</b>\n"
            f"üí∞ –°—É–º–º–∞: <b>{amount}$</b>\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_sender_balance}$</b>"
        )
        
        bot.send_message(message.chat.id, message_text, parse_mode='HTML')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ)
        try:
            bot.send_message(
                target_user_id,
                f"üí∞ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥!</b>\n"
                f"üë§ –û—Ç: <b>{sender_name}</b>\n"
                f"üíµ –°—É–º–º–∞: <b>{amount}$</b>\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_target_balance}$</b>",
                parse_mode='HTML'
            )
        except:
            pass  # –ù–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!</b>\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É–º–º–∞ - —ç—Ç–æ —á–∏—Å–ª–æ.",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        bot.send_message(message.chat.id, "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ</b>", parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
